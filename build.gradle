import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

import java.nio.charset.Charset

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version 'latest.release'
    id 'maven-publish'
    id "com.diffplug.spotless" version "latest.release"

    // download the RR tools which have no Maven Repository
    id "de.undercouch.download" version "latest.release"

    id "com.github.hierynomus.license" version "latest.release"
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "latest.release"
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://oss.sonatype.org/content/groups/public/')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    mavenCentral()
}

dependencies {
    implementation project(':JSQLParser')

    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'com.diogonunes:JColor:5.5.1'

    // https://mvnrepository.com/artifact/org.graalvm.sdk/graal-sdk
    implementation 'org.graalvm.sdk:graal-sdk:22.2.0'

    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.github.julianthome:inmemantlr-api:1.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'

    // for the RR Tools
    implementation 'org.jsoup:jsoup:1.15.3'
    compileOnly 'net.sf.saxon:Saxon-HE:11.4'

    // for the ASCII Trees
    implementation 'hu.webarticum:tree-printer:2.1.0'
    implementation 'com.github.tommyettinger:blazingchain:1.4.4.4'

}

group = 'com.manticore-projects.jsqlformatter'
description = 'JSQLFormatter'
java.sourceCompatibility = JavaVersion.VERSION_1_8

def getVersion = { boolean considerSnapshot ->
    def major = 0
    def minor = 0
    def patch = 0
    def build = 0
    def commit = ""
    def snapshot = ""
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            workingDir "$projectDir"
            args = ["--no-pager"
                    , "describe"
                    , "--tags"
                    , "--always"
                    , "--dirty=-SNAPSHOT"]
            executable "git"
            standardOutput = os
        }
        def matcher = os.toString() =~ /(\d*)\.(\d*).(\d*)-?(\d*)-?([a-zA-Z\d]*)/
        matcher.find()

        major = matcher[0][1]
        minor = matcher[0][2]
        patch = matcher[0][3]
        build = matcher[0][4]
        commit = matcher[0][5]

        if (considerSnapshot && os.toString().trim().endsWith("-SNAPSHOT")) {
            minor++
            snapshot = "-SNAPSHOT"
        }
    }
    return "${major}.${minor}.${patch}${snapshot}"
}
version = getVersion(true)

java {
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes('Main-Class': 'com.manticore.jsqlformatter.JSQLFormatter')
    }
}

shadowJar {
    minimize()
}


test {
    useJUnitPlatform()

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "1G"

    jvmArgs << ['-Djunit.jupiter.execution.parallel.enabled=false',
                '-Djunit.jupiter.execution.parallel.config.strategy=dynamic',
                '-Djunit.jupiter.execution.parallel.mode.default=concurrent']

    //finalizedBy jacocoTestReport // report is always generated after tests run
    //finalizedBy jacocoTestCoverageVerification
}

license {
    excludes(["**/*.txt", "**/*.conf", "**/*.sql",])
    includes(["**/*.properties", "**/*.java", "**/*.xml"])

    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Andreas Reichel'
    ext.email = 'andreas@manticore-projects.com'

    strictCheck = false
    ignoreFailures = true
}

spotless {
    java {
        eclipse().configFile('config/formatter/eclipse-java-google-style.xml')
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'jsqlformatter'
            from(components.java)
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('testFixturesRuntimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            // Username and Password are defined in ~/.gradle/gradle.properties
            name "ossrh"
            url version.toString().endsWith('-SNAPSHOT')
                    ? "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                    : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials(PasswordCredentials)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    maxParallelForks = 100
    forkEvery = 1
}

task gitChangelogTask(type: GitChangelogTask) {
    fromRepo = file("$projectDir")
    file = new File("${projectDir}/src/site/sphinx/changelog.rst")
    //fromRef = "4.0";
    //toRef = "1.1";
    templateContent = """
************************
Changelog
************************


{{#tags}}
{{#ifMatches name "^Unreleased.*"}}
Latest Changes since |JSQLFORMATTER_VERSION|
{{/ifMatches}}
{{#ifMatches name "^(?!Unreleased).*"}}
Version {{name}}
{{/ifMatches}}
=============================================================

 {{#issues}}

  {{#commits}}
   {{#ifMatches messageTitle "^(?!Merge).*"}}
  * **{{{messageTitle}}}**
    
    {{authorName}}, {{commitDate}}
   {{/ifMatches}}
  {{/commits}}

 {{/issues}}
{{/tags}}
"""
}

task sphinx(type: Exec) {
    dependsOn(build, gitChangelogTask)

    def versionJSQLFormatterStable = getVersion(false)
    def versionJSQLFormatterSnapshot = getVersion(true)

    String PROLOG = """
.. |JSQLFORMATTER_EMAIL| replace:: support@manticore-projects.com
.. |JSQLFORMATTER_VERSION| replace:: ${getVersion(false)}
.. |JSQLFORMATTER_SNAPSHOT_VERSION| replace:: ${getVersion(true)}
.. |JSQLFORMATTER_STABLE_VERSION_LINK| raw:: html

    <a href='http://manticore-projects.com/download/${project.name}-${versionJSQLFormatterStable}/${project.name}-${versionJSQLFormatterStable}.jar'>${project.name}-${versionJSQLFormatterStable}.jar</a>

.. |JSQLFORMATTER_STABLE_LINUX_BINARY_LINK| raw:: html

    <a href='http://manticore-projects.com/download/${project.name}-${versionJSQLFormatterStable}/${project.name}-${versionJSQLFormatterStable}.jar'>${project.name}-${versionJSQLFormatterStable}</a>

.. |JSQLFORMATTER_STABLE_WINDOWS_BINARY_LINK| raw:: html

    <a href='http://manticore-projects.com/download/${project.name}-${versionJSQLFormatterStable}/${project.name}-${versionJSQLFormatterStable}.jar'>${project.name}-${versionJSQLFormatterStable}.exe</a>

.. |JSQLFORMATTER_STABLE_MACOSX_BINARY_LINK| raw:: html

    <a href='http://manticore-projects.com/download/${project.name}-${versionJSQLFormatterStable}/${project.name}-${versionJSQLFormatterStable}.jar'>${project.name}-${versionJSQLFormatterStable}.dmg</a>

.. |JSQLFORMATTER_SNAPSHOT_VERSION_LINK| raw:: html

    <a href='http://manticore-projects.com/download/${project.name}-${versionJSQLFormatterStable}/${project.name}-${versionJSQLFormatterSnapshot}.jar'>${project.name}-${versionJSQLFormatterSnapshot}.jar</a>

"""

    args = ["-Dproject=JSQLFormatter"
            , "-Dcopyright=manticore-projects Co. Ltd., 2022"
            , "-Dauthor=Andreas Reichel"
            , "-Drelease=${getVersion(false)}"
            , "-Drst_prolog=$PROLOG"
            , "${projectDir}/src/site/sphinx"
            , "${project.buildDir}/sphinx"]

    executable "sphinx-build"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

task upload(type: Exec) {
    dependsOn(build, gitChangelogTask)

    def versionJSQLFormatterStable = getVersion(false)
    def versionJSQLFormatterSnapshot = getVersion(true)

    // define the properties in ~/.gradle/gradle.properties
    args = ["sftp://${findProperty("${project.name}.username")}@${findProperty("${project.name}.host")}/download"]

    executable "sftp"

    standardInput = new ByteArrayInputStream("""<<EOF
                                                mkdir ${project.name}-${versionJSQLFormatterStable}
                                                cd ${project.name}-${versionJSQLFormatterStable}
                                                put build/libs/*
                                                quit
                                                EOF"""
            .getBytes(Charset.defaultCharset()))

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

task website {
    doLast {
        // these WAR files have been provided as a courtesy by Gunther Rademacher
        // and belong to the RR - Railroad Diagram Generator Project
        // https://github.com/GuntherRademacher/rr
        //
        // Hosting at manticore-projects.com is temporary until a better solution is found
        // Please do not use these files without Gunther's permission
        download.run {
            src 'http://manticore-projects.com/download/convert.war'
            dest "${project(':JSQLFormatter').buildDir}/rr/convert.war"
            overwrite false
        }

        download.run {
            src 'http://manticore-projects.com/download/rr.war'
            dest "${project(':JSQLFormatter').buildDir}/rr/rr.war"
            overwrite false
        }

        javaexec {
            standardOutput = new FileOutputStream("${project(':JSQLFormatter').buildDir}/rr/JSqlParserCC.ebnf")
            main = "-jar"
            args = ["${project(':JSQLFormatter').buildDir}/rr/convert.war",
                    "${project(':JSQLParser').buildDir}/generated/jjtree/net/sf/jsqlparser/parser/JSqlParserCC.jj"]
        }

        javaexec {
            main = "-jar"
            args = ["${project(':JSQLFormatter').buildDir}/rr/rr.war",
                    "-noepsilon",
                    "-color:#4D88FF",
                    "-offset:0",
                    "-width:800",
                    //"-png",
                    //"-out:${buildDir}/rr/JSqlParserCC.zip",
                    "-out:${project(':JSQLFormatter').buildDir}/sphinx/_static/JSqlParserCC.xhtml",
                    "${project(':JSQLFormatter').buildDir}/rr/JSqlParserCC.ebnf"]
        }

        javaexec {
            //main="-jar";
            group = "Execution"
            description = "Run the main class with JavaExecTask"
            classpath = sourceSets.main.runtimeClasspath
            mainClass = 'com.manticore.jsqlformatter.RRTools'
            args = ["${project(':JSQLFormatter').buildDir}/sphinx/_static/JSqlParserCC.xhtml"]
        }
    }

    dependsOn(jar, gitChangelogTask, sphinx)
}



